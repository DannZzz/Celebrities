const heroes = require('../../JSON/heroes.json');
const enemies = require('../../JSON/enemies.json');
const { cyan } = require('../../JSON/colours.json');
const pd = require("../../models/profileSchema");
const bd = require("../../models/begSchema");
const clan = require("../../models/clanSchema");
const rpg = require("../../models/rpgSchema");
const { MessageEmbed, MessageButton, MessageActionRow } = require("discord.js");
const { COIN, STAR, CLAN } = require("../../config");
const {error, embed, perms, firstUpperCase} = require('../../functions');
const { RateLimiter } = require('discord.js-rate-limiter');
const { update } = require('../../models/profileSchema');
let rateLimiter = new RateLimiter(1, 5000);
const {isWebUri} = require('valid-url');
const devs = ['382906068319076372'];

module.exports = {
  config: {
    name: "–∫–ª–∞–Ω",
    aliases: ['clan'],
    category: 'h_roleplay',
    description: "–°–∏—Å—Ç–µ–º–∞ –∫–ª–∞–Ω–æ–≤.",
    usage: "(help | —Ö–µ–ª–ø)",
    accessableby: "–î–ª—è –≤—Å–µ—Ö"
  },
  run: async (bot, message, args, ops) => {
    let limited = rateLimiter.take(message.author.id)
    if(limited) return

    const data = await bd.findOne({userID: message.author.id})
    const user = message.author;
    let bag = await bd.findOne({userID: user.id})
    let rp = await rpg.findOne({userID: user.id});

    if (!rp) {
      let newData = await rpg.create({
        userID: user.id,
      })
      newData.save()
    }
    
    rp = await rpg.findOne({userID: user.id});
    
    const helps = ['help', '—Ö–µ–ª–ø'];
    const creates = ["—Å–æ–∑–¥–∞—Ç—å", 'create'];
    const kicks = ["kick", '–≤—ã–≥–Ω–∞—Ç—å'];
    const apps = ['–∑–∞—è–≤–∫–∏', 'apps'];
    const accept = ['–ø—Ä–∏–Ω—è—Ç—å', 'accept'];
    const reject = ['–æ—Ç–∫–ª–æ–Ω–∏—Ç—å', 'reject'];
    const upgrade = ['—É–ª—É—á—à–∏—Ç—å', 'upgrade'];
    const logo = ['–ª–æ–≥–æ—Ç–∏–ø', '–ª–æ–≥–æ', 'logo'];
    const description = ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description', 'desc'];
    const del = ['—É–¥–∞–ª–∏—Ç—å', 'delete'];
    const reward = ['–Ω–∞–≥—Ä–∞–¥–∞', 'reward'];
    const leave = ['–≤—ã–π—Ç–∏', 'leave'];
    const up = ['–ø–æ–≤—ã—Å–∏—Ç—å', 'up'];
    const down = ['–ø–æ–Ω–∏–∑–∏—Ç—å', 'down'];
    
    if (!args[0]) {
      const mc = await clan.findOne({ID: rp.clanID});
      if (!mc) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");

      let a = await rpg.find({clanID: rp.clanID}).exec()
      let b = await Promise.all(a.map(async(docs, p = 0)=> {
        const rpp = await rpg.findOne({userID: docs.userID})
        return `__${p+1}.__ ${message.guild.members.cache.get(docs.userID) ? `${message.guild.members.cache.get(docs.userID)} ${docs.userID === mc.owner ? "   <:danncrown:880492405390979132>" : ""} ${mc.staff.includes(docs.userID) ? "   <:dannstaff:881110710057332766>" : ""} ${devs.includes(docs.userID) ? "  __Dev__" : ""}` : `${bot.users.cache.get(docs.userID).tag} ${docs.userID === mc.owner ? "   <:danncrown:880492405390979132>" : ""}`} ${rpp && rpp.item ? `\n**–ì–µ—Ä–æ–π:** ${rpp.item} | **–£—Ä–æ–≤–µ–Ω—å:** ${rpp.level}` : '\n–ù–µ—Ç –≥–µ—Ä–æ—è'}`
       }))
      
      
      let myClan = new MessageEmbed()
      .setColor(cyan)
      .setTitle(`üìä __#${mc.ID}__ ‚Äî ${mc.name}`)
      .setDescription(`üëë –õ–∏–¥–µ—Ä: ${message.guild.members.cache.get(mc.owner) ? message.guild.members.cache.get(mc.owner) : bot.users.cache.get(mc.owner).tag}\nüìà –£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞: __${mc.level}__\nüí∞ –ë—é–¥–∂–µ—Ç: __${mc.budget}__ ${CLAN}${mc.description !== null ? "\n\n" + mc.description : ''}`)
      .addField(`–£—á–∞—Å—Ç–Ω–∏–∫–∏ - ${a.length } / ${mc.space}`, `${b.length !== 0 ? b.join("\n") : "–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç."}`)
      
      if (mc.logo !== null) {
        if (!isWebUri(mc.logo)) {
          myClan.setThumbnail("https://pbs.twimg.com/profile_images/1063925348205821958/DlGcxdOl_400x400.jpg")
        }else {
          myClan.setThumbnail(mc.logo)
        }
      }
      return message.channel.send({embeds: [myClan]})
    }

    const resp = args[0].toLowerCase()

    if (!isNaN(resp)) {
      const mc = await clan.findOne({ID: rp.clanID});
      if (!mc) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");

      let value = Math.round(resp);
      const msg = await message.channel.send(`<a:dannloading:876008681479749662> –ü–µ—Ä–µ–≤–æ–∂—É...`)
      let a = Math.round(Math.random() * 6) + 1
      return setTimeout(async () => {
        msg.delete()
        bag = await bd.findOne({userID: user.id})
        if (bag.stars < value) return error(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.");
        if (10 > value) return error(message, `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî __10__ ${STAR}.`);
        value = Math.floor(value / 2)
        await bd.updateOne({userID: user.id}, {$inc: {stars: -value}});
        await clan.updateOne({ID: rp.clanID}, {$inc: {budget: value}});
        return embed(message, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–≤–æ–µ–º—É –∫–ª–∞–Ω—É __${value}__ ${CLAN}`);
      }, a * 1000)
     
    }
    
    if (helps.includes(resp)) {
      const helpEmb = new MessageEmbed()
      .setColor(cyan)
      .setTimestamp()
      .setTitle("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!")
      .setDescription(`
      \`–∫–ª–∞–Ω (—á–∏—Å–ª–æ)\` ‚Äî –°–∫–∏–Ω—É—Ç—å –∑–≤—ë–∑–¥—ã –≤ –±—é–¥–∂–µ—Ç –∫–ª–∞–Ω–∞. ( __2 ${STAR}__ = __1 ${CLAN}__ )
      \`–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]\` ‚Äî –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω (—Ü–µ–Ω–∞ 5000 ${STAR})
      \`–∫–ª–∞–Ω –≤—ã–≥–Ω–∞—Ç—å [–Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞]\` ‚Äî –í—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞.
      \`–∫–ª–∞–Ω –ø–æ–≤—ã—Å–∏—Ç—å [–Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞]\` ‚Äî –ü–æ–≤—ã—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.
      \`–∫–ª–∞–Ω –ø–æ–Ω–∏–∑–∏—Ç—å [–Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞]\` ‚Äî –ü–æ–Ω–∏–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.
      \`–∫–ª–∞–Ω –∑–∞—è–≤–∫–∏\` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –∫–ª–∞–Ω–∞.
      \`–∫–ª–∞–Ω –∑–∞—è–≤–∫–∏ –æ—á–∏—Å—Ç–∏—Ç—å\` ‚Äî –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏.
      \`–∫–ª–∞–Ω –∑–∞—è–≤–∫–∏ –≤–∫–ª—é—á–∏—Ç—å\` ‚Äî –í–∫–ª—é—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª–∞–Ω.
      \`–∫–ª–∞–Ω –∑–∞—è–≤–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å\` ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª–∞–Ω.
      \`–∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å [–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏]\` ‚Äî –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞.
      \`–∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å [–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏]\` ‚Äî –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–Ω.
      \`–∫–ª–∞–Ω —É–ª—É—á—à–∏—Ç—å (–∏–Ω—Ñ–æ)\` ‚Äî –£–ª—É—á—à–∏—Ç—å –∫–ª–∞–Ω.
      \`–∫–ª–∞–Ω –æ–ø–∏—Å–∞–Ω–∏–µ [—Ç–µ–∫—Å—Ç]\` ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞.
      \`–∫–ª–∞–Ω –ª–æ–≥–æ—Ç–∏–ø [—Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–æ]\` ‚Äî –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–ª–∞–Ω–∞.
      \`–∫–ª–∞–Ω –Ω–∞–≥—Ä–∞–¥–∞\` ‚Äî –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã.
      \`–∫–ª–∞–Ω –≤—ã–π—Ç–∏\` ‚Äî –í—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞.
      \`–∫–ª–∞–Ω —É–¥–∞–ª–∏—Ç—å\` ‚Äî –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω.
      `)

      return message.channel.send({embeds: [helpEmb]});
    } else if (creates.includes(resp)) {
      const msg = await message.channel.send(`<a:dannloading:876008681479749662> –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...`)
      let a = Math.round(Math.random() * 6) + 1
      //const clanData = await clan.findOne({owner: user.id})
      setTimeout(async () => {
        msg.delete()
        if (rp.clanID !== null) return error(message, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");

        if (bag.stars < 5000) return error(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.");
        
        if (!args[1]) return error(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.");
        let getLimit = args.slice(1).join(" ").split("")
        if(getLimit.length > 20) return error(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 20-–∏ —Å–∏–º–≤–æ–ª–æ–≤.")
        const nameOfClan = firstUpperCase(args.slice(1).join(" "), " ");
        let ID = 1
        let bool = true
        while (bool) {
          let get = await clan.findOne({ID: ID});

          if(get) {
            ID += 1
            continue;
          } else {
            break;
          }
        }

        let newClan = await clan.create({
          owner: user.id,
          ID: ID,
          name: nameOfClan
        });
        newClan.save()
        await rpg.updateOne({userID: message.author.id}, {$set: {clanID: ID}})
        await bd.updateOne({userID: user.id}, {$inc: {stars: -5000}})
        return embed(message, '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –∫–ª–∞–Ω!')
      }, a * 1000)
      
    } else if (kicks.includes(resp)) {
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      let getCl = await clan.findOne({ID: rp.clanID});
      if(message.author.id !== getCl.owner) return error(message, "–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞.");
      if (!args[1] || isNaN(args[1])) return error(message, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
      let a = await rpg.find({clanID: rp.clanID}).map(b => b);

      if(Math.round(args[1]) > a.length || Math.round(args[1]) <= 0) return error(message, '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!')

      let getIndex = Math.round(args[1]) - 1;

      if(a[getIndex]["userID"] === message.author.id) return error(message, '–í—ã ‚Äî –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞, –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è.');
      if (getCl.staff.includes(a[getIndex]["userID"])) return error(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≥–Ω–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.");
      
      await rpg.updateOne({userID: a[getIndex]["userID"]}, {$set: {clanID: null}});

      return embed(message, `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ __${bot.users.cache.get(a[getIndex]["userID"]).tag}__.`)
    } else if (apps.includes(resp)) {
      
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (message.author.id !== c.owner && !c.staff.includes(user.id)) return error(message, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
      if (user.id == c.owner && args[1]) {
        if (args[1] && (args[1] === "–≤–∫–ª—é—á–∏—Ç—å" || args[1] === 'on') && user.id === c.owner) {
        if (c.appsStatus) return error(message, "–ó–∞—è–≤–∫–∏ –∏ —Ç–∞–∫ –≤–∫–ª—é—á–µ–Ω—ã!");

        await clan.updateOne({ID: c.ID}, {$set: {appsStatus: true}});

        return embed(message, "–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã.");
      } else if (args[1] && (args[1] === "–æ—Ç–∫–ª—é—á–∏—Ç—å" || args[1] === 'off') && user.id === c.owner) {
        if (!c.appsStatus) return error(message, "–ó–∞—è–≤–∫–∏ –∏ —Ç–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω—ã!");

        await clan.updateOne({ID: c.ID}, {$set: {appsStatus: false}});

        return embed(message, "–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
      } else if (args[1] === '–æ—á–∏—Å—Ç–∏—Ç—å' || args[1] === 'clear') {
        if(c.apps.length === 0) return error(message, "–ù–µ—Ç –∑–∞—è–≤–æ–∫.");

        await clan.updateOne({ID: c.ID}, {$set: {apps: []}});
        
        return embed(message, "–í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.");
      }

      } else if (args[1]){
        return error(message, "–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞, –ª–∏–±–æ —á—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ")
      }
       
      
      if(c.apps.length === 0) return error(message, "–ù–µ—Ç –∑–∞—è–≤–æ–∫.");
      
      const arr = c.apps.map(({tag, hero, level}, p=0) => `\`${p+1}.\` –£—á–∞—Å—Ç–Ω–∏–∫: __${tag}__\n–ì–µ—Ä–æ–π: __${hero}__\n–£—Ä–æ–≤–µ–Ω—å: __${level}__`)

      const emb = new MessageEmbed()
      .setColor(cyan)
      .setTimestamp()
      .setAuthor(`–í—Å–µ –∑–∞—è–≤–∫–∏!`)
      .setDescription(arr.join("\n\n"))

      return message.channel.send({embeds: [emb]});
    } else if (reject.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (message.author.id !== c.owner  && !c.staff.includes(user.id)) return error(message, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
      if(c.apps.length === 0) return error(message, "–ù–µ—Ç –∑–∞—è–≤–æ–∫!");
      if(!args[1] || isNaN(args[1])) return error(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏");

      let index = Math.round(args[1]) - 1;
      
      if(Math.round(args[1]) > c.apps.length || Math.round(args[1]) < 0) return error(message, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");

      await c.apps.splice(index);
      c.save()

      return embed(message, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
    } else if (accept.includes(resp)) {
      const msg = await message.channel.send(`<a:dannloading:876008681479749662> –ü—Ä–∏–Ω–∏–º–∞–µ–º...`)
      let a = Math.round(Math.random() * 6) + 1
      //const clanData = await clan.findOne({owner: user.id})
      setTimeout(async () => {
        msg.delete()
        const c = await clan.findOne({ID: rp.clanID});
        if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
        if (message.author.id !== c.owner && !c.staff.includes(user.id)) return error(message, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
        const members = await rpg.find({clanID: c.ID});
        if(c.space === members) return error(message, "–í –≤–∞—à–µ–º –∫–ª–∞–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É–ª—É—á—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞.");
        if(c.apps.length === 0) return error(message, "–ù–µ—Ç –∑–∞—è–≤–æ–∫!");
        if(!args[1] || isNaN(args[1])) return error(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏");

        let index = Math.round(args[1]) - 1;
        
        if(Math.round(args[1]) > c.apps.length || Math.round(args[1]) < 0) return error(message, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        const getuser = await rpg.findOne({userID: c.apps[index]["id"]});
        if (getuser.clanID !== null) return error(message, "–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞–Ω–µ.")
        await rpg.updateOne({userID: c.apps[index]["id"]}, {$set: {clanID: c.ID}});

        await c.apps.splice(index, 1);
        c.save()

        
        return embed(message, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.");
      }, a * 1000);
    } else if (upgrade.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');

      let up = 3000;
      let cost = c.level * up;
      if (c.level === 10) return error(message, "–í–∞—à –∫–ª–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω!")
      if (args[1] && (args[1] === "info" || args[1] === '–∏–Ω—Ñ–æ')) {
        const emb = new MessageEmbed()
        .setColor(cyan)
        .setTimestamp()
        .setAuthor('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.')
        .setDescription(`–¶–µ–Ω–∞ ‚Äî __${cost}__ ${CLAN}\n–ß–∏—Å–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: __${c.space}__ + __5__\n${(c.level+1) === 5 ? '–ë—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ª–æ–≥–æ—Ç–∏–ø –∫–ª–∞–Ω–∞!' : ''}`)

        return message.channel.send({embeds: [emb]})
      }
      let a = Math.round(Math.random() * 6) + 1
      if (c.level === 5 && !bag["vip1"]) return error(message, "–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º __VIP 1__ —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∫–ª–∞–Ω.")
      const msg = await message.channel.send(`<a:dannloading:876008681479749662> –£–ª—É—á—à–∞—é...`)

      setTimeout(async () => {
        msg.delete()
        if (c.budget < cost) return error(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–∏–Ω–æ–≤!")
        
        await clan.updateOne({ID: c.ID}, {$inc: {budget: -cost}});
        await clan.updateOne({ID: c.ID}, {$inc: {level: 1}});
        await clan.updateOne({ID: c.ID}, {$inc: {space: 5}});

        return embed(message, `–£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–æ __${c.level+1}__.`);

      }, a * 1000)
    } else if (description.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');
      if (!args[1]) return error(message, "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
      if (c.level < 5) return error(message, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º 5 –∏–ª–∏ –≤—ã—à–µ.')
      let getLimit = args.slice(1).join(" ").split("")
      if(getLimit.length > 400) return error(message, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 400 —Å–∏–º–≤–æ–ª–æ–≤.")
      const descriptionText = args.slice(1).join(" ");
      await clan.updateOne({ID: c.ID}, {$set: {description: descriptionText}});

      return embed(message, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
    } else if (logo.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');
      if (!args[1]) return error(message, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø.")
      if (c.level < 5) return error(message, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º 5 –∏–ª–∏ –≤—ã—à–µ.')
      if(!isWebUri(args.slice(1).join(""))) return error(message, "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É!")
      await clan.updateOne({ID: c.ID}, {$set: {logo: args.slice(1).join("")}});

      return embed(message, "–õ–æ–≥–æ—Ç–∏–ø –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    } else if (del.includes(resp)) {
      const now = ops.queue.get(user.id);
      if (now) return
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');

      const button1 = new MessageButton()
            .setCustomId('previousbtn')
            .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å')
            .setStyle('DANGER');

            const button2 = new MessageButton()
            .setCustomId('nextbtn')
            .setLabel('–£–¥–∞–ª–∏—Ç—å')
            .setStyle('SUCCESS');

      let buttonList = [
          button1,
          button2
      ]

      const Emb = new MessageEmbed()
      .setColor(cyan)
      .setTimestamp()
      .setAuthor(user.username, user.displayAvatarURL({dynamic: true}))
      .setTitle('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω?')
      
      ops.queue.set(user.id, {name: "deleting"})
      
      const row = new MessageActionRow().addComponents(buttonList);
      const curPage = await message.reply({
        embeds: [Emb],
        components: [row],
      })
      
      const filter = (i) =>
      (i.customId === buttonList[0].customId ||
      i.customId === buttonList[1].customId) &&
      i.user.id === user.id;

      const collector = await curPage.createMessageComponentCollector({
      filter,
      time: 15000,
      });


      collector.on("collect", async (i) => {
        if(i.customId === buttonList[0].customId) {
          await i.deferUpdate()
          if (!curPage.deleted) {
            const disabledRow = new MessageActionRow().addComponents(
              buttonList[0].setDisabled(true),
              buttonList[1].setDisabled(true)
            );
            curPage.edit({
              embeds: [Emb.setTitle('–î–µ–π—Å—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.')],
              components: [disabledRow],
            });
          }
          ops.queue.delete(user.id)
          collector.stop()
        } else if (i.customId === buttonList[1].customId) {
          await i.deferUpdate()
          await rpg.updateMany({clanID: c.ID}, {$set: {clanID: null}})
          await c.delete()
          const disabledRow = new MessageActionRow().addComponents(
            buttonList[0].setDisabled(true),
            buttonList[1].setDisabled(true)
          );
          curPage.edit({
            embeds: [Emb.setTitle('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –∫–ª–∞–Ω.')],
            components: [disabledRow],
          });//
          ops.queue.delete(user.id)
          collector.stop()
        }
      })
    
      collector.on("end", () => {
        if (!curPage.deleted) {
          const disabledRow = new MessageActionRow().addComponents(
            buttonList[0].setDisabled(true),
            buttonList[1].setDisabled(true)
          );
          curPage.edit({
            components: [disabledRow],
          });
        }
        ops.queue.delete(user.id)
      });
      
      
    } else if (reward.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner && !c.staff.includes(user.id)) return error(message, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
      
      let author = await c.reward;
      let timeout;
      if (bag["vip2"] === true) { timeout = 43200 * 1000; } else {
        timeout = 86400 * 1000;
      }
      if (author !== null && timeout - (Date.now() - author) > 0) {
          let time = new Date(timeout - (Date.now() - author));
  
          return error(message, `–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ **${time.getUTCHours()} —á–∞—Å–∞(-–æ–≤) ${time.getMinutes()} –º–∏–Ω—É—Ç**.`);
      }

      let rew = c.level * 30

      const users = await rpg.find({clanID: c.ID}).exec()
      await clan.updateOne({ID: c.ID}, {$set: {reward: Date.now()}})
      await users.forEach(async asd => await bd.updateOne({userID: asd.userID}, {$inc: {stars: rew}}))
      
      return embed(message, `–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ ‚Äî __${rew}__ ${STAR}`)
    } else if (leave.includes(resp)) {
      const now = ops.queue.get(user.id);
      if (now) return
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id === c.owner) return error(message, "–õ–∏–¥–µ—Ä –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏.");

      const button1 = new MessageButton()
      .setCustomId('previousbtn')
      .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å')
      .setStyle('DANGER');

      const button2 = new MessageButton()
      .setCustomId('nextbtn')
      .setLabel('–í—ã–π—Ç–∏')
      .setStyle('SUCCESS');

      let buttonList = [
          button1,
          button2
      ]

      const Emb = new MessageEmbed()
      .setColor(cyan)
      .setTimestamp()
      .setAuthor(user.username, user.displayAvatarURL({dynamic: true}))
      .setTitle('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω?')

      ops.queue.set(user.id, {name: "deleting"})

      const row = new MessageActionRow().addComponents(buttonList);
      const curPage = await message.reply({
        embeds: [Emb],
        components: [row],
      })

      const filter = (i) =>
      (i.customId === buttonList[0].customId ||
      i.customId === buttonList[1].customId) &&
      i.user.id === user.id;

      const collector = await curPage.createMessageComponentCollector({
      filter,
      time: 15000,
      });

      collector.on("collect", async (i) => {
        if(i.customId === buttonList[0].customId) {
          await i.deferUpdate()
          if (!curPage.deleted) {
            const disabledRow = new MessageActionRow().addComponents(
              buttonList[0].setDisabled(true),
              buttonList[1].setDisabled(true)
            );
            curPage.edit({
              embeds: [Emb.setTitle('–î–µ–π—Å—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.')],
              components: [disabledRow],
            });
          }
          ops.queue.delete(user.id)
          collector.stop()
        } else if (i.customId === buttonList[1].customId) {
          await i.deferUpdate()
          await rpg.updateOne({userID: user.id}, {$set: {clanID: null}});
          const disabledRow = new MessageActionRow().addComponents(
            buttonList[0].setDisabled(true),
            buttonList[1].setDisabled(true)
          );
          
          if (c.staff.includes(user.id)) {
            await c.staff.splice(c.staff.indexOf(user.id), 1);
            c.save()
          }
          
          curPage.edit({
            embeds: [Emb.setTitle('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞.')],
            components: [disabledRow],
          });//
          ops.queue.delete(user.id)
          collector.stop()
        }
      })
      
      collector.on("end", () => {
        if (!curPage.deleted) {
          const disabledRow = new MessageActionRow().addComponents(
            buttonList[0].setDisabled(true),
            buttonList[1].setDisabled(true)
          );
          curPage.edit({
            components: [disabledRow],
          });
        }
        ops.queue.delete(user.id)
      });
      
    } else if (up.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');
      const a = await rpg.find({clanID: c.ID}).exec()
      const a1 = args[1];
      
      if (!a1 || isNaN(a1)) return error(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.");
      if (a1 > a.length || Math.round(a1) <= 0) return error(message, "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
      const i = a1 - 1;
      
      const memb = a[i]["userID"];
      if(memb === c.owner) return error(message, '–í—ã ‚Äî –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞, –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Å–µ–±—è.');
      
      if(c.staff.includes(memb)) return error(message, "–≠—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã —É–∂–µ –ø–æ–≤—ã—Å–∏–ª–∏.");
      const count = c.space / 5;
      if (count === c.staff.length) return error(message, "–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");

      await c.staff.push(memb);
      c.save()

      return embed(message, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞.')
      
    } else if (down.includes(resp)) {
      const c = await clan.findOne({ID: rp.clanID});
      if (rp.clanID === null) return error(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.");
      if (user.id !== c.owner) return error(message, '–í—ã –Ω–µ –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞!');

      const a = await rpg.find({clanID: c.ID}).exec()
      const a1 = args[1];
      
      if (!a1 || isNaN(a1)) return error(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.");
      if (a1 > a.length || Math.round(a1) <= 0) return error(message, "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
      const i = a1 - 1;
      
      const memb = a[i]["userID"];
      if(memb === c.owner) return error(message, '–í—ã ‚Äî –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞, –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —Å–µ–±—è.');
      
      if(!c.staff.includes(memb)) return error(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.");
      
      await c.staff.splice(c.staff.indexOf(memb), 1);
      c.save()

      return embed(message, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.')
    } else {
      return error(message, "–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. (\`?–∫–ª–∞–Ω —Ö–µ–ª–ø\`)");
    }
    

  }
};

const heroes = require('../../JSON/heroes.json');
const { cyan } = require('../../JSON/colours.json');
const pd = require("../../models/profileSchema");
const bd = require("../../models/begSchema");
const rpg = require("../../models/rpgSchema");
const { MessageEmbed } = require("discord.js");
const {error} = require('../../functions');
const { RateLimiter } = require('discord.js-rate-limiter');
let rateLimiter = new RateLimiter(1, 5000);

module.exports = {
  config: {
    name: "–≥–µ—Ä–æ–π",
    aliases: ['hero'],
    category: 'h_roleplay',
    description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è.",
    usage: "(—É—á–∞—Å—Ç–Ω–∏–∫)",
    accessableby: "–î–ª—è –≤—Å–µ—Ö"
  },
  run: async (bot, message, args) => {
    let limited = rateLimiter.take(message.author.id)
      if(limited) return
       
    const user = message.member;
    if(user.user.bot) return error(message, '–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –≥–µ—Ä–æ—è.');
    const rp = await rpg.findOne({userID: user.id});
    if (!rp) return error(message, '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –≥–µ—Ä–æ—è.');
    if(rp.item !== null) {
    const item = heroes[rp.item]
    let myHero = new MessageEmbed()
    .setAuthor(`–ì–µ—Ä–æ–π ${user.user.tag}`)
    .setTitle(`${item.name} (${item.nameRus})\n–£—Ä–æ–≤–µ–Ω—å: ${rp.level}  –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: ${rp.surviveLevel}-–π`)
    .setDescription(item.description)
    .setThumbnail(item.url)
    .addField(`‚ù§ –û–±—â–∞—è –∂–∏–∑–Ω—å:`, `${rp.health}`, true)
    .addField(`‚öî –û–±—â–∞—è –∞—Ç–∞–∫–∞:`, `${rp.damage}`, true)
    .addField(`üü° –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:`, `${rp.totalGames}`, false)
    .addField(`üü¢ –í—ã–∏–≥—Ä–∞–Ω–æ –∏–≥—Ä:`, `${rp.wins}`, true)
    .addField(`üî¥ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ –∏–≥—Ä:`, `${rp.loses}`, true)
    .addField(`üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:`, `${Math.trunc(rp.wins / rp.totalGames  * 100) || '0'}%`, true)
    .setColor(cyan)

    return message.channel.send({embeds: [myHero]}).then(msg => setTimeout(()=>msg.delete(), 30 * 1000))
  } else {
    return error(message, '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –≥–µ—Ä–æ—è.');
  }

  }
};
